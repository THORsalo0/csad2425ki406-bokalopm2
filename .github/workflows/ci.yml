name: CI Workflow

on:
  push:
    branches:
      - develop
      - feature/develop/task3
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: windows-latest

    steps:
       # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      # Restore NuGet packages
      - name: Restore NuGet packages
        run: nuget restore ./APKS_Lab3/APKS_Lab3.sln

      # Build solution with output directory
      - name: Build solution
        run: msbuild ./APKS_Lab3/APKS_Lab3.sln /p:Configuration=Release /p:OutDir=${{ github.workspace }}/output/ /verbosity:minimal

      # Перевірка всіх файлів у проекті для відладки
      - name: List all files recursively
        run: Get-ChildItem ./APKS_Lab3 -Recurse

      # Перевірка файлів у obj/Release
      - name: Check output directory
        run: dir ./APKS_Lab3/APKS_Lab3/obj/Release


      # Upload Executable as Artifact
      - name: Upload Executable as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Executable
          path: ./APKS_Lab3/APKS_Lab3/obj/Release/APKS_Lab3.exe
          

      # Install Arduino CLI
      - name: Set up Arduino CLI
        run: |
          wget https://downloads.arduino.cc/arduino-cli/arduino-cli_latest_Linux_64bit.tar.gz
          tar -xvf arduino-cli_latest_Linux_64bit.tar.gz
          sudo mv arduino-cli /usr/local/bin/
          arduino-cli config init

      # Install Arduino AVR core and libraries
      - name: Install Arduino AVR core and libraries
        run: |
          arduino-cli core update-index
          arduino-cli core install arduino:avr
          arduino-cli lib install ArduinoJson

      # Compile Arduino Sketch (simulated)
      - name: Compile Arduino Sketch (simulated)
        run: |
          mkdir -p build  # Ensure the build directory exists
          arduino-cli compile --fqbn arduino:avr:nano:cpu=atmega328old --output-dir build lab3Ino/lab3Ino.ino

      # Generate client executable from Python script
      - name: Generate executable
        run: |
          mkdir -p dist  # Ensure the dist directory exists
          pyinstaller --onefile lab3.py

      # Upload the generated executable as an artifact
      - name: Upload executable as artifact
        uses: actions/upload-artifact@v3
        with:
          name: compiled-executable
          path: dist/lab3  # This is the generated file from PyInstaller

      # Download the artifact (the executable)
      - name: Download compiled executable artifact
        uses: actions/download-artifact@v3
        with:
          name: compiled-executable

      # Install pyserial
      - name: Install pyserial
        run: |
          pip install pyserial

      # Run PowerShell Tests
      - name: Run PowerShell Tests
        shell: pwsh
        run: |
          # Run the tests
          .\Tests\Tests.ps1 | Tee-Object -FilePath serial_output.log

      # Upload test reports as an artifact
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: serial_output.log
