name: CI Workflow

on:
  push:
    branches:
      - develop
      - feature/develop/task3
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: windows-latest

    steps:
       # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      # Restore NuGet packages
      - name: Restore NuGet packages
        run: nuget restore ./APKS_Lab3/APKS_Lab3.sln

      # Build solution with output directory
      - name: Build solution
        run: msbuild ./APKS_Lab3/APKS_Lab3.sln /p:Configuration=Release /p:OutDir=${{ github.workspace }}/output/ /verbosity:minimal

      # Перевірка всіх файлів у проекті для відладки
      - name: List all files recursively
        run: Get-ChildItem ./APKS_Lab3 -Recurse

      # Перевірка файлів у obj/Release
      - name: Check output directory
        run: dir ./APKS_Lab3/APKS_Lab3/obj/Release


      # Upload Executable as Artifact
      - name: Upload Executable as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Executable
          path: ./APKS_Lab3/APKS_Lab3/obj/Release/APKS_Lab3.exe
          


    # Restore NuGet packages for test project (UnitTestProject)
      - name: Restore NuGet packages for test project
        run: |
          dotnet restore ./APKS_Lab3/UnitTestProject_Lab3_Software/UnitTestProject_Lab3_Software.csproj

          
      # Set up .NET Framework 4.8 environment
      - name: Install Visual Studio Build Tools with Validation
        run: |
          # Завантаження інсталятора
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_installer.exe -OutFile vs_installer.exe
          
          # Перевірка наявності та обчислення хешу SHA256
          if (Test-Path vs_installer.exe) {
            $hash = Get-FileHash vs_installer.exe -Algorithm SHA256
            Write-Host "SHA256 hash: $($hash.Hash)"
            
            # Додайте відомий хеш для перевірки цілісності (приклад)
            $expectedHash = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" # замініть на реальний хеш
            if ($hash.Hash -ne $expectedHash) {
              Write-Host "File hash mismatch. File may be corrupted."
              exit 1
            }
            
            # Запуск інсталятора
            Start-Process -FilePath vs_installer.exe -ArgumentList '--quiet', '--wait', '--add', 'BuildTools' -NoNewWindow -Wait
          } else {
            Write-Host "Installer download failed."
            exit 1
          }
          
          # Видалення інсталяційного файлу після завершення
          Remove-Item vs_installer.exe -Force

    # Check if vstest.console.exe is available
      - name: Check vstest.console.exe availability
        run: |
          if (Test-Path "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\TestPlatform\vstest.console.exe") {
            Write-Host "vstest.console.exe is available."
          } else {
            Write-Host "vstest.console.exe is NOT available."
          }

      # Run unit tests and specify output format
      - name: Run unit tests
        run: |
          Write-Host "Running unit tests..."
          # Add header to the test results file
          "Software tests" | Out-File -FilePath "${{ github.workspace }}/Test_results.txt" -Encoding UTF8
          
          # Run unit tests and specify output directory and logger
          dotnet test "${{ github.workspace }}/APKS_Lab3/UnitTestProject_Lab3_Software/UnitTestProject_Lab3_Software.csproj" `
              --logger "trx;LogFileName=test-results.trx" `
              --results-directory "${{ github.workspace }}/test-results"

      # Upload test reports as an artifact
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: ${{ github.workspace }}/test-results/test-results.trx
